{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, setPersistence, browserLocalPersistence, GoogleAuthProvider, signInWithPopup, signOut } from \"firebase/auth\";\nimport firebaseConfig from \"./config\";\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\nsetPersistence(auth, browserLocalPersistence);\nasync function handleGoogleSignIn() {\n  signInWithPopup(auth, provider).then(result => {\n    // google access token\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // signed-in user info.\n    const user = result.user;\n    console.log(user, token);\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    const email = error.customData.email;\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    console.log(errorCode, errorMessage, email, credential);\n  });\n}\nasync function handleSignOut() {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport { handleGoogleSignIn, auth, handleSignOut };","map":{"version":3,"names":["initializeApp","getAuth","setPersistence","browserLocalPersistence","GoogleAuthProvider","signInWithPopup","signOut","firebaseConfig","app","auth","provider","handleGoogleSignIn","then","result","credential","credentialFromResult","token","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","handleSignOut"],"sources":["/home/jellx/Projects/SneakPeak/sneakpeak-app/sneakpeak/src/firebase/auth.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  setPersistence,\n  browserLocalPersistence,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\nimport firebaseConfig from \"./config\";\n\nconst app = initializeApp(firebaseConfig);\n\nconst auth = getAuth(app);\n\nconst provider = new GoogleAuthProvider();\n\nsetPersistence(auth, browserLocalPersistence);\n\nasync function handleGoogleSignIn() {\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      // google access token\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // signed-in user info.\n      const user = result.user;\n      console.log(user, token);\n    })\n    .catch((error) => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      const email = error.customData.email;\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(errorCode, errorMessage, email, credential);\n    });\n}\n\nasync function handleSignOut() {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport { handleGoogleSignIn, auth, handleSignOut };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,cAAc,EACdC,uBAAuB,EACvBC,kBAAkB,EAClBC,eAAe,EACfC,OAAO,QACF,eAAe;AACtB,OAAOC,cAAc,MAAM,UAAU;AAErC,MAAMC,GAAG,GAAGR,aAAa,CAACO,cAAc,CAAC;AAEzC,MAAME,IAAI,GAAGR,OAAO,CAACO,GAAG,CAAC;AAEzB,MAAME,QAAQ,GAAG,IAAIN,kBAAkB,CAAC,CAAC;AAEzCF,cAAc,CAACO,IAAI,EAAEN,uBAAuB,CAAC;AAE7C,eAAeQ,kBAAkBA,CAAA,EAAG;EAClCN,eAAe,CAACI,IAAI,EAAEC,QAAQ,CAAC,CAC5BE,IAAI,CAAEC,MAAM,IAAK;IAChB;IACA,MAAMC,UAAU,GAAGV,kBAAkB,CAACW,oBAAoB,CAACF,MAAM,CAAC;IAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;IACpC;IACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;IACxBC,OAAO,CAACC,GAAG,CAACF,IAAI,EAAEF,KAAK,CAAC;EAC1B,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAK;IAChB,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;IAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;IAClC,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;IACpC,MAAMb,UAAU,GAAGV,kBAAkB,CAACyB,mBAAmB,CAACP,KAAK,CAAC;IAChEH,OAAO,CAACC,GAAG,CAACG,SAAS,EAAEE,YAAY,EAAEE,KAAK,EAAEb,UAAU,CAAC;EACzD,CAAC,CAAC;AACN;AAEA,eAAegB,aAAaA,CAAA,EAAG;EAC7B,IAAI;IACF,MAAMxB,OAAO,CAACG,IAAI,CAAC;EACrB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;EACtB;AACF;AAEA,SAASX,kBAAkB,EAAEF,IAAI,EAAEqB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}